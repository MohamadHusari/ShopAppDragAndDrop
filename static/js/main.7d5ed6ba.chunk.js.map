{"version":3,"sources":["logo.svg","components/Header.js","components/SearchBar.js","components/Cart.js","components/Course.js","components/Popups.js","components/BuyCoursesPage.js","serviceWorker.js","index.js"],"names":["module","exports","Header","cartSize","this","props","className","src","logo","width","height","alt","icon","faShoppingCart","size","Component","SearchBar","handleOrder","e","arrow","preventDefault","setState","selectvalue","target","value","state","handleChangeStateWithObject","sortby","currentPage","handlerCurrency","currencyselect","exchangeto","bind","type","placeholder","onChange","searchCourses","htmlFor","data-tip","data-for","onClick","faArrowUp","id","place","effect","faArrowDown","Cart","handleEditModeChange","editmode","handleSmallRemoveButton","removeFromCart","closest","cartList","exChangeValues","exChangeTo","sum","isEmpty","defaultChecked","clearCartPopup","faTrashAlt","droppableId","provided","droppableProps","ref","innerRef","loading","role","map","course","i","parseFloat","price","key","draggableId","index","onDragStart","dragHandleProps","event","draggableProps","name","toFixed","Course","handleReadMoreAndLess","closeOpenDescription","buttonref","read","print","text","substring","length","substr","handleAddToCart","show","addToCart","handleRemoveFromCart","setRef","React","createRef","isInCard","prevProps","children","description","level","added_date","faCartPlus","EmptyCartPopup","title","Swal","fire","showCancelButton","cancelButtonText","confirmButtonColor","cancelButtonColor","confirmButtonText","SucessEmptyCartPopup","BuyCoursesPage","obj","readmoreisopened","current","click","error","sorted","filtered","sort","a","b","Date","cart","then","result","sourceClone","Array","from","destClone","connectedarr","concat","localStorage","clear","move","droppable1","droppable2","securels","set","newList","courses","filter","coursename","toLowerCase","includes","differenceBy","eachCourse","parseInt","exchangevalues","source","destination","droppableSource","droppableDestination","splice","removed","onDragEnd","SecureLS","errormsg","firstRequest","axios","get","res","data","catch","err","secondRequest","rates","Promise","all","diff","filteredLength","slice","totalPages","Math","ceil","forceUpdate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d5ed6ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {Component} from 'react';\r\nimport logo from '../logo.svg';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faShoppingCart} from '@fortawesome/free-solid-svg-icons';\r\n\r\n/**\r\n * @class - Header\r\n * @description - Header that includes navbar and get the size of the cart array from the parent component (BuyCoursesPage)\r\n */\r\nclass Header extends Component {\r\n    render() {\r\n        const {cartSize} = this.props;\r\n        return (\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <div className=\"container\">\r\n                    <div className=\"navbar-brand\">\r\n                        <img src={logo} width=\"30\" height=\"30\"\r\n                             className=\"d-inline-block align-top mr-2\" alt=\"\"/>\r\n                        <span className=\"font-weight-bold\">Buy Courses</span>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <button className=\"btn position-relative\">\r\n                            <FontAwesomeIcon icon={faShoppingCart} size=\"lg\"/>\r\n                            {\r\n                                cartSize > 0 && <span\r\n                                    className=\"badge badge-pill badge-info align-top position-absolute\">{cartSize}</span>\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faArrowDown, faArrowUp} from '@fortawesome/free-solid-svg-icons';\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nclass SearchBar extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            arrow: 'DOWN',\r\n            selectvalue: 'Date',\r\n            currencyselect: 'Choose...'\r\n        };\r\n        this.handleOrder = this.handleOrder.bind(this);\r\n        this.handlerCurrency = this.handlerCurrency.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @description - Function that handle the select option and the arrow of order by\r\n     * @param e - event object\r\n     * @param arrow - is which arrow is right now showin the search bar under Sort by\r\n     * @steps -\r\n     * 1) change the select option to selected value in (selectvalue in state object) and update the arrow\r\n     * if changed from the default value \"DOWN\", after the values changes change sortby and currentPage in parent state object.\r\n     */\r\n    handleOrder = (e, arrow = \"DOWN\") => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            selectvalue: e.target.value ? e.target.value : this.state.selectvalue,\r\n            arrow\r\n        }, () =>\r\n            this.props.handleChangeStateWithObject({sortby: this.state.selectvalue + arrow, currentPage: 1}))\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param e - event object\r\n     */\r\n    handlerCurrency = (e) => {\r\n        e.preventDefault();\r\n        this.setState({currencyselect:e.target.value}, () =>\r\n            this.props.handleChangeStateWithObject({exchangeto:this.state.currencyselect}))\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"m-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-lg-5 my-1 m-lg-0\">\r\n                        <input type=\"text\" className=\"form-control form-control-sm\" placeholder=\"Search Courses...\"\r\n                               onChange={this.props.searchCourses}/>\r\n                    </div>\r\n                    <div className=\"col-12 col-lg-4 my-1 m-lg-0\">\r\n                        <label htmlFor=\"sort-by\" className=\"col-form-label-sm mx-2 mb-0 pl-2 pl-lg-0\">Sort By\r\n                            :</label>\r\n                        <select className=\"d-inline w-50 form-control form-control-sm\"\r\n                                onChange={this.handleOrder} value={this.state.selectvalue}>\r\n                            <option value=\"Date\">Date</option>\r\n                            <option value=\"Price\">Price</option>\r\n                            <option value=\"Level\">Level</option>\r\n                        </select>\r\n                        {this.state.arrow === 'UP' ?\r\n                            <>\r\n                                <span data-tip=\"ascending\" data-for=\"arrowup\" className=\"mx-2\">\r\n                                        <button className=\"btn btn-outline-dark btn-sm border-0\"\r\n                                                onClick={e => {\r\n                                                    this.handleOrder(e)\r\n                                                }\r\n                                                }>\r\n                                            <FontAwesomeIcon icon={faArrowUp}/>\r\n                                        </button>\r\n                                </span>\r\n                                <ReactTooltip id=\"arrowup\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <span data-tip=\"descending\" data-for=\"arrowdown\" className=\"mx-2\">\r\n                                    <button className=\"btn btn-outline-dark btn-sm border-0\"\r\n                                            onClick={e => {\r\n                                                this.handleOrder(e, \"UP\")\r\n                                            }}>\r\n                                        <FontAwesomeIcon icon={faArrowDown}/>\r\n                                    </button>\r\n                                    <ReactTooltip id=\"arrowdown\" place=\"right\" type=\"dark\" effect=\"solid\"/>\r\n                                </span>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                    <div className=\"col-12 col-lg-3 d-flex justify-content-start justify-content-lg-center\">\r\n                        <label htmlFor=\"sort-by\" className=\"col-form-label-sm mx-2 mb-0 pl-2 pl-lg-0\">Currency:</label>\r\n                        <select className=\"d-inline w-50 form-control form-control-sm mt-1 m-lg-0\" value={this.state.currencyselect} onChange={this.handlerCurrency}>\r\n                            <option value=\"Choose...\">Choose...</option>\r\n                            <option value=\"EUR\">EUR</option>\r\n                            <option value=\"ILS\">ILS</option>\r\n                            <option value=\"GBP\">GBP</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, {Component} from 'react';\r\nimport isEmpty from 'lodash.isempty';\r\nimport ReactTooltip from 'react-tooltip'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faTrashAlt} from '@fortawesome/free-regular-svg-icons';\r\nimport Toggle from 'react-toggle';\r\nimport \"react-toggle/style.css\";\r\nimport {Droppable, Draggable} from 'react-beautiful-dnd';\r\n\r\nclass Cart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            editmode: false\r\n        };\r\n        this.handleEditModeChange = this.handleEditModeChange.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @description - Change Toggle turn on and turn off for edit mode toggle\r\n     */\r\n    handleEditModeChange = () => {\r\n        this.setState({editmode: !this.state.editmode})\r\n    };\r\n\r\n    /**\r\n     * @description - function to handle the small button on every cart course row\r\n     * Use the removeFromCart function from Parent component (BuyCoursesPage) to remove the course by the course id\r\n     * @param e - event object\r\n     */\r\n    handleSmallRemoveButton = (e) => {\r\n        this.props.removeFromCart(e.target.closest('li').value);\r\n    };\r\n\r\n    render() {\r\n        const {cartList, exChangeValues, exChangeTo} = this.props;\r\n        let sum = 0;\r\n        return (\r\n            <aside id=\"cart\" className=\"sticky-top\">\r\n                <div className=\"clearfix\">\r\n                    <h3 className=\"d-inline font-weight-light h5\">Cart</h3>\r\n                    {!isEmpty(cartList) &&\r\n                    <div className=\"float-right\">\r\n                        <span data-tip=\"Edit mode\" data-for=\"editmode\">\r\n                            <Toggle className=\"bg-light\"\r\n                                    defaultChecked={this.state.editmode}\r\n                                    onChange={this.handleEditModeChange}/>\r\n                        </span>\r\n                        <ReactTooltip id=\"editmode\" type=\"dark\" effect=\"solid\"/>\r\n                    </div>\r\n                    }\r\n                    {!isEmpty(cartList) && this.state.editmode &&\r\n                    <div className=\"float-right\">\r\n                        <span data-tip=\"Clear all\" data-for=\"clearall\">\r\n                            <button type=\"button\" className=\"btn btn-sm text-uppercase\"\r\n                                    onClick={() => this.props.clearCartPopup('Are you sure?', 'You won\\'t be able to revert this!', 'warning')}>\r\n                            <FontAwesomeIcon icon={faTrashAlt} size=\"lg\"/>\r\n                            </button>\r\n                        </span>\r\n                        <ReactTooltip id=\"clearall\" type=\"dark\" effect=\"solid\"/>\r\n                    </div>\r\n                    }\r\n                </div>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {provided => (\r\n                        <div {...provided.droppableProps} ref={provided.innerRef} className=\"card bg-light border-0 p-2 shadow-sm\">\r\n                            <ul className=\"list-unstyled\">\r\n                                {\r\n                                    this.props.loading ?\r\n                                        <div className=\"text-center\">\r\n                                            <div className=\"spinner-border\" role=\"status\">\r\n                                                <span className=\"sr-only\">Loading...</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        :\r\n                                        isEmpty(cartList) ?\r\n                                            <span className=\"d-block text-center text-muted text-uppercase\">Cart is Empty</span>\r\n                                            :\r\n                                            cartList.map((course,i) => {\r\n                                                sum += parseFloat(course.price);\r\n                                                return (\r\n                                                    <Draggable key={course.id} draggableId={course.id} index={i}>\r\n                                                        {provided => {\r\n                                                            const onDragStart = (() => {\r\n                                                            // dragHandleProps might be null\r\n                                                                sum = 0;\r\n                                                            if (!provided.dragHandleProps) {\r\n                                                            return onDragStart;\r\n                                                            }\r\n\r\n                                                            // creating a new onMouseDown function that calls myOnMouseDown as well as the drag handle one.\r\n                                                            return event => {\r\n                                                            provided.dragHandleProps.onDragStart(event);\r\n                                                                };\r\n                                                        })();\r\n                                                            return (<li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} onDragStart={onDragStart} value={i}\r\n                                                                className=\"d-flex justify-content-between align-items-center py-2\">\r\n                                                                <span className=\"course-title pl-1\">\r\n                                                                    {course.name}\r\n                                                                </span>\r\n                                                                <span className=\"course-price\">\r\n                                                                    {course.price}$\r\n                                                                </span>\r\n                                                                {this.state.editmode &&\r\n                                                                <>\r\n                                                                        <span data-tip=\"Remove\" data-for=\"removeone\">\r\n                                                                            <button type=\"button\" className=\"btn btn-sm text-danger\"\r\n                                                                                    onClick={this.handleSmallRemoveButton}>\r\n                                                                                <FontAwesomeIcon icon={faTrashAlt} size=\"sm\"/>\r\n                                                                            </button>\r\n                                                                        </span>\r\n                                                                    <ReactTooltip id=\"removeone\" place=\"right\" type=\"dark\"\r\n                                                                                  effect=\"solid\"/>\r\n                                                                </>\r\n                                                                }\r\n                                                            </li>\r\n                                                        );\r\n                                                        }}\r\n                                                    </Draggable>\r\n                                                );\r\n                                            })\r\n                                }\r\n                            </ul>\r\n                            <p className=\"d-flex justify-content-between align-items-center mb-0 py-2\">\r\n                                <span className=\"course-title\">\r\n                                    Total\r\n                                </span>\r\n                                <span className=\"cart-total-price\">\r\n                                    {sum.toFixed(2)}$\r\n                                    {sum !== 0 && exChangeValues !== null && exChangeTo !== 'Choose...' && exChangeValues[exChangeTo] &&\r\n                                    <small\r\n                                        className=\"pl-1\">({(sum * exChangeValues[exChangeTo]).toFixed(2)} {exChangeTo})</small>\r\n                                    }\r\n                                </span>\r\n                            </p>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </aside>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Cart;","import React, {Component} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCartPlus} from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Course extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            show: false,\r\n            read: true,\r\n        };\r\n        this.buttonref = React.createRef();\r\n        this.print = this.print.bind(this);\r\n        this.handleAddToCart = this.handleAddToCart.bind(this);\r\n        this.handleRemoveFromCart = this.handleRemoveFromCart.bind(this);\r\n        this.handleReadMoreAndLess = this.handleReadMoreAndLess.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    componentDidMount() {\r\n        this.setState({\r\n            show: this.props.isInCard\r\n        });\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param prevProps - The pervious props of the component\r\n     * @description - componentDidUpdate needed because isInCard is value from props that inserted in show key (in state object)\r\n     * and this value there is no any function that changed it because the component cannot do a render\r\n     */\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.isInCard !== prevProps.isInCard) // Check if it's still in card isInCard\r\n        {\r\n            this.setState({\r\n                show: this.props.isInCard\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @description - Function to handle the Read more / Read less button\r\n     * @steps:\r\n     * 1) Send reference to closeOpenDescription function in BuyCoursesPage component\r\n     * 2) Change the read value in state object\r\n     */\r\n    handleReadMoreAndLess = () => {\r\n        this.props.closeOpenDescription(this.buttonref);\r\n        this.setState({\r\n            read: !this.state.read\r\n        })\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @description - Function to print Description with limitation of letters that shows in description <p>\r\n     * @steps:\r\n     * 1) Cut the description text and holds it in substring variable\r\n     * 2) Check IF it's a text is course description or course title\r\n     *  2.1) is course description return the substring of description and button (read more/ read less)\r\n     */\r\n    print = (text, size = 35) => {\r\n        const substring =\r\n            text.length > size ?\r\n                text[size - 1] === \" \" ?\r\n                    text.substr(0, size - 1) + ' ...'\r\n                    :\r\n                    text.substr(0, size) + '...'\r\n                :\r\n                text;\r\n        return (\r\n            <>\r\n                {this.state.read ? substring : text}{size !== 35 &&\r\n            <button ref={this.buttonref} className=\"btn btn-sm btn-link\"\r\n                    onClick={this.handleReadMoreAndLess}>{this.state.read ? \"Read more\" : \"Read less\"}</button>}\r\n            </>\r\n        );\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @description - Change to trash icon with show variable in state object\r\n     * and use addToCart function from parent component (BuyCoursesPage) that add course in cart array\r\n     */\r\n    handleAddToCart = (index) => {\r\n        this.setState({show: true});\r\n        this.props.addToCart(index);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @description - Change to cart icon with show variable in state object\r\n     * and use removeFromCart function from parent component (BuyCoursesPage) that remove course from cart array\r\n     */\r\n    handleRemoveFromCart = (id) => {\r\n        this.setState({show: false});\r\n        this.props.removeFromCart(id);\r\n    };\r\n\r\n    setRef = ref => {\r\n        // keep a reference to the dom ref as an instance property\r\n        this.ref = ref;\r\n        // give the dom ref to react-beautiful-dnd\r\n        this.props.innerRef(ref);\r\n    };\r\n\r\n    render() {\r\n        const { provided } = this.props;\r\n        const course = this.props.children;\r\n        const {exChangeValues, exChangeTo, index} = this.props;\r\n        return (\r\n            <div {...provided.draggableProps} {...provided.dragHandleProps} ref={this.setRef} className=\"course-card col-12 col-md-6 my-2\">\r\n                <div className=\"card border-0 shadow-sm bg-light\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{this.print(course.name)}</h5>\r\n                        {/*<h6 className=\"card-subtitle mb-2 text-muted\">Card subtitle</h6>*/}\r\n                        <p className=\"card-text\">{this.print(course.description, 110)}</p>\r\n                        <p className=\"card-text card-price m-0\">{course.price}$\r\n                            {exChangeValues !== null && exChangeTo !== 'Choose...' && exChangeValues[exChangeTo] &&\r\n                            <small\r\n                                className=\"pl-1\">({(course.price * exChangeValues[exChangeTo]).toFixed(2)} {exChangeTo})</small>\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"card-footer bg-transparent border-0 clearfix\">\r\n                        <small className=\"text-muted\">\r\n                            Level: {course.level} - {course.added_date}\r\n                        </small>\r\n                        <div className=\"float-right\">\r\n                            {!this.state.show &&\r\n                                <button\r\n                                    className={`btn btn-outline-primary btn-sm ${this.state.show ? '' : 'show'}`}\r\n                                    onClick={() => this.handleAddToCart(index)}>\r\n                                    <FontAwesomeIcon icon={faCartPlus}/>\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Course;","import Swal from 'sweetalert2';\r\n\r\n/**\r\n * @description - Popup\r\n * @param title\r\n * @param text\r\n * @param type\r\n * @returns {Promise<SweetAlertResult>}\r\n * @constructor\r\n */\r\nexport const EmptyCartPopup = (title, text, type) => {\r\n    return Swal.fire({\r\n        title: title,\r\n        text: text,\r\n        type: type,\r\n        showCancelButton: true,\r\n        cancelButtonText:'No',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Yes, reset it!'\r\n    })\r\n};\r\n\r\n/**\r\n *\r\n * @returns {Promise<SweetAlertResult>}\r\n * @constructor\r\n */\r\nexport const SucessEmptyCartPopup = () => {\r\n    return Swal.fire(\r\n        'Deleted!',\r\n        'You cart is empty now.',\r\n        'success'\r\n    )\r\n};\r\n\r\n","import React, {Component} from 'react';\r\nimport Header from './Header';\r\nimport SearchBar from './SearchBar';\r\nimport Cart from './Cart';\r\nimport axios from 'axios';\r\nimport Course from \"./Course\";\r\nimport isEmpty from 'lodash.isempty';\r\nimport SecureLS from 'secure-ls';\r\nimport {ThemeProvider} from '@zendeskgarden/react-theming';\r\nimport {Pagination} from '@zendeskgarden/react-pagination';\r\nimport {EmptyCartPopup, SucessEmptyCartPopup} from './Popups';\r\nimport '../style/BuyCoursesPage.css';\r\nimport '@zendeskgarden/react-pagination/dist/styles.css';\r\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\r\nimport differenceBy from 'lodash/differenceBy';\r\n\r\nclass BuyCoursesPage extends Component {\r\n    constructor() {\r\n        super();\r\n        this.securels = new SecureLS();\r\n        this.state = {\r\n            loading: true,\r\n            courses: [],\r\n            filtered: [],\r\n            cart: [],\r\n            sortby: '',\r\n            currentPage: 1,\r\n            exchangeto: 'Choose...',\r\n            errormsg: 'No results'\r\n        };\r\n        this.readmoreisopened = null;\r\n        this.exchangevalues = null;\r\n        this.eachCourse = this.eachCourse.bind(this);\r\n        this.addToCart = this.addToCart.bind(this);\r\n        this.removeFromCart = this.removeFromCart.bind(this);\r\n        this.searchCourses = this.searchCourses.bind(this);\r\n        this.handleChangeStateWithObject = this.handleChangeStateWithObject.bind(this);\r\n        this.sorted = this.sorted.bind(this);\r\n        this.clearCartPopup = this.clearCartPopup.bind(this);\r\n        this.closeOpenDescription = this.closeOpenDescription.bind(this);\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @description - Initialization that requires DOM nodes and load data from a remote endpoint\r\n     * @steps -\r\n     * 1) Get courses data and save it to courses and filtered arrays in state object, change status of loading page to false\r\n     * 2) Get Exchange rate values for the USD and save it in global variable (exchangevalues)\r\n     * 3) Check localstorage cart (key) if exist that mean there is saved cart items, transfer localstorage cart values to cart array in state (object)\r\n     */\r\n    componentDidMount() {\r\n        const firstRequest = axios.get('https://testapi.io/api/MohamadHusari/courses').then(res => {\r\n            this.setState({courses: res.data.courses, loading: false, filtered: res.data.courses});\r\n        }).catch(err => {\r\n            this.setState({\r\n                loading: false,\r\n                errormsg: 'Can\\'t load items data, please try again later'\r\n            });\r\n        });\r\n        const secondRequest = axios.get('https://api.exchangeratesapi.io/latest?base=USD').then((res) => {\r\n            this.exchangevalues = res.data.rates;\r\n        }).catch(err => {\r\n            this.exchangevalues = null;\r\n        });\r\n        Promise.all([firstRequest, secondRequest]).then(() => {\r\n            if (this.state.errormsg === 'No results' && localStorage.cart) {\r\n                const sourceClone = Array.from(this.state.filtered);\r\n                const destClone = Array.from(this.securels.get('cart'));\r\n                const diff = differenceBy(sourceClone, destClone, 'id');\r\n                // const diff = sourceClone.filter(item1 =>\r\n                //     !destClone.some(item2 => (item2.id === item1.id && item2.name === item1.name)));\r\n                this.setState({\r\n                    filtered: diff,\r\n                    cart: this.securels.get('cart')\r\n                }, () => this.clearCartPopup('Your cart isn\\'t empty!!', 'Do you want to reset it?', 'warning'));\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Used in (SearchBar Component)\r\n     * First use :\r\n     * @param obj - exmaple {sortway: \"PriceUp\", currentPage:1}\r\n     *  get the selected value of Currency (selector) from SearchBar (component)\r\n     * @description: Change that selected value and hold in exchangeto key in state object.\r\n     *\r\n     * Second use:\r\n     * Selector value of the Sort by selector change the value with sortby in state object\r\n     * @description: This function moved to SearchBar component by props with name.\r\n     */\r\n    handleChangeStateWithObject = (obj) => {\r\n        this.setState({\r\n            ...obj\r\n        });\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param buttonref - Alwayes holds that pressed read more button\r\n     * @steps -\r\n     * 1) Check if read more(or read less) clicked and save reference (react RF) to the (button) in readmoreisopened variable\r\n     * 2) Else check if the same (read more / read less button clicked)\r\n     * 2.1) if the same change readmoreisopened to null\r\n     * 2.2) else if  not the same (click the read more / read less before to close it and open the new one)\r\n     */\r\n    closeOpenDescription = (buttonref) => {\r\n        if (this.readmoreisopened === null) {\r\n            this.readmoreisopened = buttonref;\r\n        } else {\r\n            if (this.readmoreisopened === buttonref)\r\n                this.readmoreisopened = null;\r\n            else {\r\n                try {\r\n                    this.readmoreisopened.current.click();\r\n                } catch (error) {\r\n                    this.readmoreisopened = null;\r\n                } finally {\r\n                    this.readmoreisopened = buttonref;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @description - Sort the filtered array by which option that selected in select box ( Function orderBy changed by the component SearchBar )\r\n     * @steps -\r\n     * 1) Get the filtered array of courses and the sort way that selected by select box in component SearchBar form state object\r\n     * 2) sort the filtered array by the sort way (DateUP,DateDOWN,PriceUP,PriceDOWN,LevelUP,LevelDOWN)\r\n     * @returns sorted filtered courses array with different way\r\n     */\r\n    sorted = () => {\r\n        const {filtered, sortby} = this.state;\r\n        const level = {\r\n            \"Beginners\": 0,\r\n            \"Lower Intermediate\": 1,\r\n            \"Upper Intermediate\": 2,\r\n            \"Lower Advanced\": 3,\r\n            \"Advanced\": 4,\r\n            \"Upper Advanced\": 5\r\n        };\r\n        switch (sortby) {\r\n            case 'DateUP':\r\n                return filtered.sort((a, b) => new Date(a.added_date) - new Date(b.added_date));\r\n            case 'DateDOWN':\r\n                return filtered.sort((a, b) => new Date(b.added_date) - new Date(a.added_date));\r\n            case 'PriceUP':\r\n                return filtered.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\r\n            case 'PriceDOWN':\r\n                return filtered.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));\r\n            case 'LevelUP':\r\n                return filtered.sort((a, b) => ((level[b.level] < level[a.level]) ? -1 : ((level[b.level] > level[a.level]) ? 1 : (a.id < b.id) ? -1 : (a.id > b.id) && 1)));\r\n            case 'LevelDOWN':\r\n                return filtered.sort((a, b) => ((level[a.level] < level[b.level]) ? -1 : ((level[a.level] > level[b.level]) ? 1 : (a.id < b.id) ? -1 : (a.id > b.id) && 1)));\r\n            default:\r\n                return filtered.sort((a, b) => new Date(b.added_date) - new Date(a.added_date));\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param title - The Popup title\r\n     * @param text - The Popup text\r\n     * @param type - The Popup type ( 'success' | 'error' | 'warning' | 'info' | 'question')\r\n     * @description - Show this Popup when reload a tab or join the website again and the cart is not empty\r\n     */\r\n    clearCartPopup = (title, text, type) => {\r\n        if (!isEmpty(this.state.cart)) {\r\n            EmptyCartPopup(title, text, type).then((result) => {\r\n                if (result.value) {\r\n                    SucessEmptyCartPopup().then(() => {\r\n                        const sourceClone = Array.from(this.state.filtered);\r\n                        const destClone = Array.from(this.state.cart);\r\n                        const connectedarr = sourceClone.concat(destClone);\r\n                        this.setState({\r\n                            cart: [],\r\n                            filtered: connectedarr\r\n                        }, () => localStorage.clear());\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param index - index inside filtered[index] array to add in cart[this.state.cart.length + 1]\r\n     * @description - Save/Add the course in cart array and show it in the cart aside category and save the cart array in localstorage under ket cart\r\n     */\r\n    addToCart = (index) => {\r\n        const result = this.move(\r\n            this.state.filtered,\r\n            this.state.cart,\r\n            {index: index, droppableId: \"droppable1\"},\r\n            {droppableId: \"droppable2\", index: this.state.cart.length}\r\n        );\r\n        this.setState({\r\n            filtered: result.droppable1 ? result.droppable1 : [],\r\n            cart: result.droppable2 ? result.droppable2 : []\r\n        }, () => {\r\n            this.securels.set('cart', this.state.cart);\r\n        });\r\n\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param index - index inside cart droppable2\r\n     * @description - Remove the course from the cart list by course id and update the cart array in object state and save it in localstorage under ket cart\r\n     */\r\n    removeFromCart = async (index) => {\r\n        const result = this.move(\r\n            this.state.cart,\r\n            this.state.filtered,\r\n            {index: index, droppableId: \"droppable2\"},\r\n            {index: this.state.filtered.length, droppableId: \"droppable1\"}\r\n        );\r\n        this.setState({\r\n            filtered: result.droppable1 ? result.droppable1 : [],\r\n            cart: result.droppable2 ? result.droppable2 : []\r\n        },()=>{\r\n            this.securels.set('cart', this.state.cart);\r\n        });\r\n\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param value - get target value of the search input field\r\n     * @description - filter the courses data by checking if course name includes search bar value (that write) and save the last array in filtered in state object\r\n     */\r\n    searchCourses = ({target: {value}}) => {\r\n        // Variable to hold the original version of the list\r\n        let currentList = [];\r\n        // Variable to hold the filtered list before putting into state\r\n        let newList = [];\r\n        // If the search bar isn't empty\r\n        if (value !== \"\") {\r\n            // Assign the original list to currentList\r\n            const destClone = Array.from(this.state.cart);\r\n            currentList = this.state.courses;\r\n\r\n            // Use .filter() to determine which items should be displayed\r\n            // based on the search terms\r\n            const sourceClone = currentList.filter(course => {\r\n                // change current item to lowercase\r\n                const coursename = course.name.toLowerCase();\r\n                // change search term to lowercase\r\n                const filter = value.toLowerCase();\r\n                // check to see if the current list item includes the search term\r\n                // If it does, it will be added to newList. Using lowercase eliminates\r\n                // issues with capitalization in search terms and search content\r\n                return coursename.includes(filter);\r\n            });\r\n            newList =  differenceBy(sourceClone,destClone, 'id');\r\n        } else {\r\n            // If the search bar is empty, set newList to original task list\r\n            newList = differenceBy(this.state.courses,this.state.cart, 'id');\r\n        }\r\n        // Set the filtered state based on what our rules added to newList\r\n        this.setState({\r\n            filtered: newList\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @description - print course component for each course in courses array in state object\r\n     * @param course - Course object\r\n     * @param i - Course index\r\n     * @steps:\r\n     * 1) check if cart is not empty and course id not includes in cart\r\n     *  1.1) then but isInCard to true\r\n     * 2) Else is not in cart\r\n     *  2.1) Print the default Course component that isInCard={false} have value false\r\n     * @returns Course Component\r\n     */\r\n    eachCourse = (course, i) => {\r\n        return (\r\n            <Draggable key={course.id} draggableId={course.id} index={(this.state.currentPage * 10) - 10 + parseInt(i)}>\r\n                {provided => (\r\n                    <Course index={(this.state.currentPage * 10) - 10 + parseInt(i)} innerRef={provided.innerRef}\r\n                            provided={provided} closeOpenDescription={this.closeOpenDescription}\r\n                            addToCart={this.addToCart}\r\n                            removeFromCart={this.removeFromCart} isInCard={false} exChangeValues={this.exchangevalues}\r\n                            exChangeTo={this.state.exchangeto}>\r\n                        {course}\r\n                    </Course>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    };\r\n    move = (source, destination, droppableSource, droppableDestination) => {\r\n        const sourceClone = Array.from(source);\r\n        const destClone = Array.from(destination);\r\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n        destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n        const result = {};\r\n        result[droppableSource.droppableId] = sourceClone;\r\n        result[droppableDestination.droppableId] = destClone;\r\n        return result;\r\n    };\r\n    onDragEnd = (result) => {\r\n        const {source, destination} = result;\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        if (source.droppableId !== destination.droppableId) {\r\n            if (source.droppableId === 'droppable1') {\r\n                this.addToCart(source.index);\r\n            } else {\r\n                this.removeFromCart(source.index);\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {currentPage} = this.state;\r\n        const filteredLength = this.state.filtered.length;\r\n        return (\r\n            <>\r\n                <Header cartSize={this.state.cart.length}/>\r\n                <div className=\"container\">\r\n                    <SearchBar searchCourses={this.searchCourses}\r\n                               handleChangeStateWithObject={this.handleChangeStateWithObject}/>\r\n                    <DragDropContext onDragEnd={this.onDragEnd}>\r\n                        <div className=\"row\">\r\n                            <div id=\"main\" className=\"col-12 col-lg-9 order-1 order-lg-0\">\r\n                                {\r\n                                    this.state.loading ?\r\n                                        <div className=\"d-flex justify-content-center align-items-center h-100\">\r\n                                            <div className=\"spinner-border\" role=\"status\">\r\n                                                <span className=\"sr-only\">Loading...</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        :\r\n                                        isEmpty(this.state.filtered) ?\r\n                                            <p className=\"d-flex h-100 justify-content-center align-items-center text-uppercase\">{this.state.errormsg}</p>\r\n                                            :\r\n                                            <div className=\"col-12\">\r\n                                                <Droppable droppableId=\"droppable1\">\r\n                                                    {provided => (\r\n                                                        <div {...provided.droppableProps} ref={provided.innerRef} className=\"row\">\r\n                                                            {this.sorted().slice((currentPage * 10) - 10, (currentPage * 10 > filteredLength) ? filteredLength : currentPage * 10).map(this.eachCourse)}\r\n                                                            {provided.placeholder}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Droppable>\r\n                                                <div className=\"my-2\">\r\n                                                    <ThemeProvider>\r\n                                                        <Pagination totalPages={Math.ceil(filteredLength / 10)}\r\n                                                                    currentPage={currentPage}\r\n                                                                    onChange={(currentPage) => {\r\n                                                                        this.setState({currentPage}, () => this.forceUpdate())\r\n                                                                    }}/>\r\n                                                    </ThemeProvider>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                }\r\n                            </div>\r\n                            <div className=\"col-lg-3 order-0 order-lg-1 my-2 my-lg-0 mx-3 mx-lg-0\">\r\n                                <Cart cartList={this.state.cart} loading={this.state.loading}\r\n                                      clearCartPopup={this.clearCartPopup} removeFromCart={this.removeFromCart}\r\n                                      exChangeValues={this.exchangevalues} exChangeTo={this.state.exchangeto}/>\r\n                            </div>\r\n                        </div>\r\n                    </DragDropContext>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BuyCoursesPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BuyCoursesPage from './components/BuyCoursesPage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<BuyCoursesPage/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}